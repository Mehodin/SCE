language: cpp
dist: xenial

#cache:
#    ccache: true

before_install:
    # set sources
    - sudo apt-add-repository -y ppa:ubuntu-toolchain-r/test
    - sudo add-apt-repository -y ppa:beineri/opt-qt-5.11.2-xenial
    # tell apt to allow parallel downloads and retry on a failed network connection
    - sudo sh -c "printf 'Acquire::Queue-Mode "host";\\nAcquire::Retries 10;\\n' >> /etc/apt/apt.conf"
    # gcc
    - PACKAGES=${PACKAGES}"gcc-8 g++-8 "
    # gdb
    - PACKAGES=${PACKAGES}"gdb "
    # ninja
    - PACKAGES=${PACKAGES}"ninja-build "
    # boost
    - PACKAGES=${PACKAGES}"libboost-all-dev "
    # LSP server clangd
    - PACKAGES=${PACKAGES}"clang-tools-6.0 "
    # python
    - PACKAGES=${PACKAGES}"python2.7 "
    - PACKAGES=${PACKAGES}"python3.5 "
    # Qt
    - PACKAGES=${PACKAGES}"qt511-meta-minimal mesa-common-dev "
    # protobuf
    - git clone -b v1.10.x --single-branch --depth=1 --recursive https://github.com/grpc/grpc
    # cmake
    - PACKAGES=${PACKAGES}"cmake "
    # Update sources
    - sudo apt-get update

install:
    # install packages
    - echo "Installing "${PACKAGES}
    - sudo apt-get install ${PACKAGES}
    # gcc
    - sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 90
    - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 90
    # clang
    - sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-6.0 90
    - sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-6.0 90
    # clangd
    - sudo update-alternatives --install /usr/bin/clangd clangd /usr/bin/clangd-6.0 90
    # ccache
    - which clang++
    - sudo ln -s $(which ccache) /usr/lib/ccache/clang++
    - sudo ln -s $(which ccache) /usr/lib/ccache/clang
    - which clang++
    - which g++
    # protobuf
    - cd grpc && mkdir build && cd build
    - cmake .. -G Ninja || {printf "Output log:\n-----------\n" && cat CMakeFiles/CMakeOutput.log && printf "Error log\n---------\n" && cat CMakeFiles/CMakeError.log && false}
    - sudo ninja install
    - sudo cp grpc_* /usr/local/bin
    - sudo cp *.a /usr/local/lib
    - cd ../..
    - export GRPC_LIBS=$(sh -e print_libs.sh)
    - echo $GRPC_LIBS

before_script:
    # Display
    - export DISPLAY=:99.0
    - sh -e /etc/init.d/xvfb start
    # Qt
    - source /opt/qt511/bin/qt511-env.sh
    - export QT_FATAL_WARNINGS=1
    # Sanitizer settings
    - export ASAN_SYMBOLIZER_PATH=/usr/local/clang-7.0.0/bin/llvm-symbolizer
    - file ${ASAN_SYMBOLIZER_PATH}
    - export UBSAN_OPTIONS=print_stacktrace=1
    - export LSAN_OPTIONS=suppressions=../lsan.supp #ignore Qt's memory leaks
    # print versions
    - g++ --version
    - gcc --version
    - clang++ --version
    - clang --version
    - protoc --version
    - cmake --version
    - ninja --version
    - python --version
    - python2 --version
    - python3 --version
    - gdb --version
    - ld --version
    - clangd --version
    - echo $PATH
    # set up python environment
    - mkdir build && cd build
    - cmake -G Ninja .. || {printf "Output log:\n-----------\n" && cat CMakeFiles/CMakeOutput.log && printf "Error log\n---------\n" && cat CMakeFiles/CMakeError.log && false}
    - ninja python_environment
    - cd .. && rm -R build

script:
    #disable ccache here because of permission issues
    - export CCACHE_DISABLE=1
    - ./run_all_test_configurations.sh

after_script:
    # ccache stats
    #   - ccache -s
