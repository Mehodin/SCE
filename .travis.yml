language: cpp
dist: trusty

addons:
    apt:
        sources:
            # Ubuntu testing
            - ubuntu-toolchain-r-test
        packages:
            # C++17
            - g++-7
            # ninja
            - ninja-build
            # realpath
            - realpath

before_install:
    # gcc 7
    - sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 90
    # clang 5
    - sudo add-apt-repository -y ppa:jonathonf/llvm
    # ld
    - sudo add-apt-repository -y ppa:jonathonf/binutils
    # python
    - sudo add-apt-repository -y ppa:jonathonf/python-2.7
    - sudo add-apt-repository -y ppa:jonathonf/python-3.6
    # Qt 5.9
    - sudo add-apt-repository -y ppa:beineri/opt-qt-5.10.1-trusty
    # protobuf
    - git clone -b v1.10.x --single-branch --recursive https://github.com/grpc/grpc
    # Update sources
    - sudo apt-get update

install:
    # clang
    - sudo apt-get install clang-5.0
    # ld
    - sudo apt-get install binutils
    # python
    - sudo apt-get install python2.7
    - sudo apt-get install python3.6
    # Qt 5.9
    - sudo apt-get install qt510base
    # protobuf
    - cd grpc && mkdir build && cd build
    - cmake .. -G Ninja
    - sudo ninja install -j4
    - sudo cp grpc_* /usr/local/bin
    - sudo cp *.a /usr/local/lib
    - cd ../..
    - export GRPC_LIBS=$(sh print_libs.sh)
    - echo $GRPC_LIBS

before_script:
    # Display
    - export DISPLAY=:99.0
    - sh -e /etc/init.d/xvfb start
    # Qt 5.9
    - source /opt/qt510/bin/qt510-env.sh
    - export QT_FATAL_WARNINGS=1
    # Sanitizer settings
    - export UBSAN_OPTIONS=print_stacktrace=1
    - export LSAN_OPTIONS=suppressions=../lsan.supp #ignore Qt's memory leaks
    # print versions
    - g++ --version
    - clang++ --version
    - protoc --version
    - cmake --version
    - ninja --version
    - ld --version
    - python --version
    - python2 --version
    - python3 --version
    - /usr/bin/x86_64-linux-gnu-ld --version
    # set up build directories
    - mkdir gcc_debug_build
    - mkdir gcc_release_build
    - mkdir clang_debug_build
    - mkdir clang_release_build

script:
    # gcc debug build
    - cd gcc_debug_build
    - cmake -DCMAKE_BUILD_TYPE=DEBUG -G Ninja ..
    - ninja -j4
    - ./SCE test
    # gcc release build
    - cd ../gcc_release_build
    - cmake -DCMAKE_BUILD_TYPE=RELEASE -G Ninja ..
    - ninja -j4
    - ./SCE test
    # clang debug build
    - export CC=clang
    - export CXX=clang++
    - cd ../clang_debug_build
    - cmake -DCMAKE_BUILD_TYPE=DEBUG -G Ninja ..
    - ninja -j4
    - ./SCE test
    # clang release build
    - cd ../clang_release_build
    - cmake -DCMAKE_BUILD_TYPE=RELEASE -G Ninja ..
    - ninja -j4
    - ./SCE test
